# bluu-fullstack/docker-compose.yml
services:
  db:
    image: postgres:14-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-bluu}_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user_app_dev}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password_app_dev}
      POSTGRES_DB: ${POSTGRES_DB:-db_app_dev}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "${DB_PORT:-5432}:5432"
    networks:
      - app_network

  admin-app-php:
    build:
      context: ./admin-app
      dockerfile: Dockerfile
    container_name: ${COMPOSE_PROJECT_NAME:-bluu}_admin_php
    restart: unless-stopped
    volumes:
      - ./admin-app:/var/www/html # Mount kode lokal untuk hot-reloading
    # Menggunakan .env dari dalam direktori admin-app untuk Laravel
    # Variabel di bawah ini akan menimpa jika ada duplikasi
    environment:
      APP_ENV: local # Diambil dari admin-app/.env seharusnya
      APP_DEBUG: true # Diambil dari admin-app/.env seharusnya
      # APP_KEY: # Biarkan Laravel/Dockerfile yang mengurus
      DB_HOST: db # Nama service database
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB:-db_app_dev}
      DB_USERNAME: ${POSTGRES_USER:-user_app_dev}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password_app_dev}
      # Variabel lain bisa diambil dari admin-app/.env yang di-mount
    env_file: # Ini akan memuat variabel dari admin-app/.env jika ada
      - ./admin-app/.env
    depends_on:
      - db
    networks:
      - app_network

  admin-app-nginx:
    image: nginx:1.25-alpine
    container_name: ${COMPOSE_PROJECT_NAME:-bluu}_admin_nginx
    restart: unless-stopped
    ports:
      - "${ADMIN_APP_PORT:-8081}:80"
    volumes:
      - ./admin-app:/var/www/html # Untuk Nginx mengakses aset statis
      - ./admin-app/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - admin-app-php
    networks:
      - app_network

  client-app:
    build:
      context: ./client-app
      dockerfile: Dockerfile
      args:
        # NEXT_PUBLIC_API_URL_ARG akan diambil dari .env global (root .env)
        # atau default ke http://localhost:3000
        NEXT_PUBLIC_API_URL_ARG: ${NEXT_PUBLIC_API_URL_BUILD_ARG:-http://client-app:3000}
    container_name: ${COMPOSE_PROJECT_NAME:-bluu}_client_app
    restart: unless-stopped
    # volumes:
    #   - ./client-app:/app
    #   - /app/node_modules # Anonymous volume untuk node_modules di kontainer
    #   - /app/.next # Anonymous volume untuk .next di kontainer
    ports:
      - "${CLIENT_APP_PORT:-8080}:3000"
    # Menggunakan .env.local dari dalam direktori client-app untuk Next.js
    # Variabel di bawah ini akan menimpa jika ada duplikasi
    environment:
      NODE_ENV: development
      # Variabel DB untuk API route Next.js
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB:-db_app_dev}
      DB_USERNAME: ${POSTGRES_USER:-user_app_dev}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-password_app_dev}
      # NEXT_PUBLIC_API_URL di-set saat build, tapi bisa juga di-override di sini untuk runtime dev jika perlu
      # NEXT_PUBLIC_API_URL: http://localhost:3000 
    env_file:
      - ./client-app/.env
    depends_on:
      - db # Jika client API butuh akses DB
    networks:
      - app_network

volumes:
  postgres_data_dev:

networks:
  app_network:
    driver: bridge
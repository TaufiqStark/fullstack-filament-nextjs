# fullstack-filament-nextjs/docker-compose.yml
# version: '3.8'

services:
  # 1. Layanan Database (PostgreSQL)
  db:
    image: postgres:14-alpine
    container_name: pg_shared_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: user_app
      POSTGRES_PASSWORD: password_app
      POSTGRES_DB: db_app
    volumes:
      - postgres_data:/var/lib/postgresql/data # Volume untuk persistensi data
    ports:
      - "5432:5432" # Ekspos port DB (opsional, untuk akses eksternal jika perlu)
    networks:
      - app_network

  # 2. Layanan Aplikasi Client (Next.js)
  client-app:
    build:
      context: ./client-app
      dockerfile: Dockerfile
    container_name: client_app_nextjs
    restart: unless-stopped
    ports:
      - "80:3000" # Akses Next.js di http://localhost:8080
    environment:
      # Variabel ini akan digunakan oleh API route Next.js
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB} # Mengambil dari environment global atau .env file
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      # Untuk getServerSideProps agar tahu URL API internalnya
      NEXT_PUBLIC_API_URL: http://client-app:3000/ # Menggunakan nama service dan port internal
    depends_on:
      - db
    networks:
      - app_network

  # 3. Layanan Aplikasi Admin - PHP-FPM (Laravel)
  admin-app-php:
    build:
      context: ./admin-app
      dockerfile: Dockerfile
    container_name: admin_app_php
    restart: unless-stopped
    volumes:
      - ./admin-app:/var/www/html # Sinkronisasi kode lokal dengan kontainer
    environment:
      # Variabel ini akan digunakan oleh Laravel (dari .env Laravel)
      # Docker-compose akan menimpa variabel .env jika didefinisikan di sini
      # atau kita bisa mengandalkan file .env di dalam admin-app
      APP_ENV: local
      APP_DEBUG: true
      DB_CONNECTION: pgsql
      DB_HOST: db
      DB_PORT: 5432
      DB_DATABASE: ${POSTGRES_DB}
      DB_USERNAME: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
    depends_on:
      - db
    networks:
      - app_network

  # 4. Layanan Aplikasi Admin - Nginx Web Server (Untuk Laravel)
  admin-app-nginx:
    image: nginx:1.25-alpine
    container_name: admin_app_nginx
    restart: unless-stopped
    ports:
      - "8081:80" # Akses Dashboard Admin Laravel di http://localhost:8081
    volumes:
      - ./admin-app:/var/www/html # Volume kode aplikasi
      - ./admin-app/nginx.conf:/etc/nginx/conf.d/default.conf # Konfigurasi Nginx
    depends_on:
      - admin-app-php # Nginx butuh PHP-FPM
    networks:
      - app_network

volumes:
  postgres_data: # Definisi volume untuk persistensi data database

networks:
  app_network: # Jaringan kustom untuk komunikasi antar kontainer
    driver: bridge

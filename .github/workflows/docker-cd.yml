name: Docker CD - Deploy to Server

on:
  workflow_run:
    workflows: ["Docker CI - Build & Push Images"] # Nama workflow CI Anda
    types:
      - completed # Hanya berjalan jika workflow CI selesai
    branches:
      - main # Hanya untuk branch main

jobs:
  deploy:
    name: Deploy Application
    runs-on: ubuntu-latest
    # Hanya deploy jika workflow CI yang memicunya berhasil
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    steps:
      - name: Checkout Repository 
        # Diperlukan jika docker-compose.prod.yml atau skrip lain di repo ingin disalin/digunakan
        # atau jika git pull di server mengambil dari ref yang sama
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.workflow_run.head_sha }}

      - name: Setup SSH Agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.DEPLOY_SERVER_HOST }} >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
      
      - name: Deploy to Server
        env:
          # Variabel untuk koneksi SSH
          DEPLOY_USER: ${{ secrets.DEPLOY_SERVER_USER }}
          DEPLOY_HOST: ${{ secrets.DEPLOY_SERVER_HOST }}
          APP_DIR: /home/ubuntu/fullstack-filament-nextjs # GANTI DENGAN PATH APLIKASI ANDA DI SERVER

          # Secrets yang akan ditulis ke .env di server
          # Ini akan dibaca oleh docker-compose.prod.yml di server
          SECRET_DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }} # Untuk nama image
          SECRET_PROD_DB_USER: ${{ secrets.PROD_DB_USER }}
          SECRET_PROD_DB_PASSWORD: ${{ secrets.PROD_DB_PASSWORD }}
          SECRET_PROD_DB_NAME: ${{ secrets.PROD_DB_NAME }}
          SECRET_PROD_ADMIN_APP_URL: ${{ secrets.PROD_ADMIN_APP_URL }}
          SECRET_PROD_APP_KEY: ${{ secrets.PROD_APP_KEY }}
          # Tambahkan secret lain jika perlu, misal untuk Redis, Mail, dll.

        run: |
          echo "Deploying latest version to server ${{ env.DEPLOY_HOST }}..."
          # Mendapatkan short SHA dari commit yang memicu workflow_run (yang berasal dari CI)
          # COMMIT_SHA_SHORT=$(echo "${{ github.event.workflow_run.head_sha }}" | cut -c1-7)
          # echo "Based on commit: $COMMIT_SHA_SHORT"

          ssh -o StrictHostKeyChecking=no ${{ env.DEPLOY_USER }}@${{ env.DEPLOY_HOST }} "
            set -e # Script akan exit jika ada error

            echo '== Navigating to app directory =='
            cd ${{ env.APP_DIR }}

            echo '== Pulling latest code from Git repository (main branch) =='
            # Pastikan user SSH Anda memiliki akses ke repositori Git
            # Jika repo privat, SSH deploy key mungkin diperlukan di server untuk git pull
            git checkout main 
            git fetch origin main
            git reset --hard origin/main # Memastikan server sama dengan remote, HATI-HATI menghapus perubahan lokal di server

            echo '== Creating/Updating .env file for Docker Compose =='
            # File .env ini akan dibaca oleh docker-compose -f docker-compose.prod.yml
            # Nama variabel di KIRI adalah yang akan digunakan di docker-compose.prod.yml
            # Nilai di KANAN diambil dari GitHub Secrets via env di atas
            echo \"DOCKERHUB_USERNAME=\\\"${{ env.SECRET_DOCKERHUB_USERNAME }}\\\"\" > .env
            # echo \"IMAGE_TAG_ADMIN=${COMMIT_SHA_SHORT}\" >> .env # Atau 'latest' jika Anda lebih suka
            # echo \"IMAGE_TAG_CLIENT=${COMMIT_SHA_SHORT}\" >> .env # Atau 'latest'

            echo \"PROD_DB_USER=\\\"${{ env.SECRET_PROD_DB_USER }}\\\"\" >> .env
            echo \"PROD_DB_PASSWORD=\\\"${{ env.SECRET_PROD_DB_PASSWORD }}\\\"\" >> .env
            echo \"PROD_DB_NAME=\\\"${{ env.SECRET_PROD_DB_NAME }}\\\"\" >> .env
            
            echo \"PROD_ADMIN_APP_URL=\\\"${{ env.SECRET_PROD_ADMIN_APP_URL }}\\\"\" >> .env
            echo \"PROD_APP_KEY=\\\"${{ env.SECRET_PROD_APP_KEY }}\\\"\" >> .env
            
            # Contoh penambahan variabel lain untuk docker-compose.prod.yml jika diperlukan
            echo \"PROD_CLIENT_PORT=80\" >> .env
            echo \"PROD_ADMIN_PORT=8080\" >> .env
            # echo \"PROD_SESSION_DRIVER=database\" >> .env 
            # echo \"PROD_CACHE_DRIVER=redis\" >> .env
            # echo \"PROD_REDIS_HOST=redis\" >> .env # Jika Anda menambahkan service Redis

            echo '.env file on server created/updated:'
            cat .env # Cetak isi .env untuk debugging (hapus jika tidak ingin terlihat di log)

            echo '== Pulling latest images from Docker Hub =='
            # Menggunakan -f untuk menunjuk ke file docker-compose.prod.yml
            # Docker Compose akan menggunakan .env yang baru dibuat untuk substitusi variabel
            docker compose -f docker-compose.prod.yml pull

            echo '== Bringing up new containers with Docker Compose =='
            docker compose -f docker-compose.prod.yml up -d --remove-orphans

           echo '== Clearing ALL old Laravel Caches (important before recaching) =='
            # Perintah ini akan mencoba menghapus semua cache yang ada.
            # Jika CACHE_DRIVER adalah 'database' dan konfigurasinya masih salah, ini bisa error.
            # Tapi kita perlu membersihkan cache config lama.
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan config:clear
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan route:clear
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan view:clear
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan cache:clear # Ini yang error sebelumnya

            echo '== Caching Configuration FOR PRODUCTION =='
            # Ini akan membuat bootstrap/cache/config.php menggunakan ENV produksi dari Docker Compose
            # yang SEHARUSNYA sudah DB_CONNECTION=pgsql dan CACHE_DRIVER yang benar.
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan config:cache

            # Sekarang config sudah benar, coba migrate
            echo '== Running Laravel migrations =='
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan migrate --force

            echo '== Caching Routes and Views (Events if used) =='
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan route:cache
            docker compose -f docker-compose.prod.yml exec admin-app-php php artisan view:cache
            # docker compose -f docker-compose.prod.yml exec admin-app-php php artisan event:cache # Jika Anda menggunakan event discovery

            # 'php artisan optimize' adalah gabungan dari config:cache, route:cache, view:cache (dan event:cache di L11+)
            # Karena kita sudah melakukannya secara terpisah, ini mungkin tidak perlu,
            # atau bisa dijalankan sebagai langkah final untuk memastikan.
            # echo '== Final Laravel Optimization (Redundant if above steps done) =='
            # docker compose -f docker-compose.prod.yml exec admin-app-php php artisan optimize
            
            echo '== Deployment finished successfully! =='
          "
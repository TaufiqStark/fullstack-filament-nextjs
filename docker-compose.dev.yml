# proyek-fullstack/docker-compose.dev.yml
# version: '3.8' # Bisa dihapus jika Docker Compose Anda versi terbaru

services:
  # Layanan Database (PostgreSQL)
  db:
    image: postgres:14-alpine
    container_name: dev_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DEV_DB_USER:-user_app_dev} # Ambil dari .env.dev, fallback jika tidak ada
      POSTGRES_PASSWORD: ${DEV_DB_PASSWORD:-password_app_dev}
      POSTGRES_DB: ${DEV_DB_NAME:-db_app_dev}
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "${DEV_DB_PORT:-5432}:5432" # Port DB untuk diakses dari lokal
    networks:
      - app_network_dev

  # Aplikasi Admin - PHP-FPM (Laravel)
  admin-app-php:
    build:
      context: ./admin-app
      dockerfile: Dockerfile
      # (Opsional) Anda bisa menargetkan stage tertentu jika Dockerfile punya stage dev
      # target: development 
    container_name: dev_admin_app_php
    restart: unless-stopped
    volumes:
      - ./admin-app:/var/www/html # Mount kode lokal untuk hot-reloading
      # Anda bisa me-mount .env.dev secara eksplisit jika perlu, atau biarkan Laravel membacanya dari volume utama
      # - ./admin-app/.env.dev:/var/www/html/.env 
    env_file:
      - ./admin-app/.env.dev # Memuat variabel dari file .env.dev
    environment:
      # Variabel ini akan menimpa yang ada di .env.dev jika diset di sini
      APP_ENV: local
      APP_DEBUG: true
      DB_HOST: db # Nama service database
      # Kredensial DB lainnya diambil dari env_file atau default di atas
    depends_on:
      - db
    networks:
      - app_network_dev

  # Aplikasi Admin - Nginx Web Server
  admin-app-nginx:
    image: nginx:1.25-alpine
    container_name: dev_admin_app_nginx
    restart: unless-stopped
    ports:
      - "${DEV_ADMIN_PORT:-8081}:80" # Akses admin di http://localhost:8081
    volumes:
      - ./admin-app:/var/www/html # Untuk Nginx mengakses aset statis
      - ./admin-app/nginx.conf:/etc/nginx/conf.d/default.conf # Konfigurasi Nginx lokal
    depends_on:
      - admin-app-php
    networks:
      - app_network_dev

  # Aplikasi Client (Next.js)
  client-app:
    build:
      context: ./client-app
      dockerfile: Dockerfile
      # (Opsional) Anda bisa menargetkan stage tertentu jika Dockerfile punya stage dev
      # target: development
      args:
        # Untuk development, API bisa jadi service admin atau API Next.js itu sendiri
        NEXT_PUBLIC_API_URL_ARG: ${DEV_NEXT_PUBLIC_API_URL:-http://localhost:3000}
    container_name: dev_client_app
    restart: unless-stopped
    volumes:
      - ./client-app:/app # Mount kode lokal
      - /app/node_modules # Mencegah node_modules lokal menimpa yang di kontainer
      - /app/.next # Mencegah .next lokal menimpa yang di kontainer
    ports:
      - "${DEV_CLIENT_PORT:-8080}:3000" # Akses client di http://localhost:8080
    env_file:
      - ./client-app/.env.dev # Memuat variabel dari file .env.dev.local
    environment:
      # Variabel ini akan menimpa yang ada di .env.dev.local jika diset di sini
      NODE_ENV: development
      # NEXT_PUBLIC_API_URL akan diambil dari build arg atau env_file
    depends_on:
      - db # Jika client butuh DB langsung, atau admin-app-php jika API-nya di sana
    networks:
      - app_network_dev

volumes:
  postgres_data_dev:

networks:
  app_network_dev:
    driver: bridge
